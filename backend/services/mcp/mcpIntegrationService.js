// ============================================================================
// üöÄ MCP Integration Service - Orquesta Function Calling con el sistema existente
// ============================================================================

const functionCallingService = require('./functionCallingService');
const openaiService = require('../integrations/openaiService');
const industryPrompts = require('../../templates/industryPrompts');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

class MCPIntegrationService {
  constructor() {
    console.log('üîß MCP Integration Service initialized');
  }

  /**
   * ‚úÖ M√âTODO PRINCIPAL: Generar respuesta con MCP Function Calling
   * 
   * Este m√©todo reemplaza/complementa el openaiService.generateNaturalResponseWithCustomPrompt()
   * pero mantiene compatibilidad completa con el sistema existente
   */
  async generateResponseWithMCP(
    conversationHistory,
    customPrompt,
    businessContext,
    currentIntent,
    agent,
    customerLead,
    conversation
  ) {
    try {
      console.log('üöÄ Generating MCP response for agent:', agent.name);
      
      // 1. Verificar si el usuario tiene MCP habilitado
      const mcpConfig = await this.getMCPConfiguration(agent.userId);
      
      if (!mcpConfig.mcpEnabled) {
        console.log('üîÑ MCP disabled, falling back to standard OpenAI');
        return await openaiService.generateNaturalResponseWithCustomPrompt(
          conversationHistory,
          customPrompt,
          businessContext,
          currentIntent,
          agent.model,
          agent.temperature,
          agent.maxTokensPerMessage,
          agent.reasoningEffort,
          agent.verbosity
        );
      }

      // 2. Preparar contexto completo para Function Calling
      const functionContext = {
        userId: agent.userId,
        agentId: agent.id,
        conversationId: conversation.id,
        customerLeadId: customerLead.id,
        customerPhone: customerLead.phone,
        whatsappNumber: businessContext.whatsappNumber || conversation.userWhatsAppNumber?.phoneNumber,
        currentTags: customerLead.tags || [],
        conversationMetadata: conversation.metadata || {}
      };

      // 3. Detectar industria y usar prompt especializado
      const detectedIndustry = this.detectUserIndustry(
        agent,
        customerLead,
        conversationHistory
      );
      
      // 4. Generar prompt contextualizado por industria
      const industryPrompt = industryPrompts.generateContextualPrompt(
        detectedIndustry,
        {
          businessName: agent.businessName || 'SafeNotify',
          agentName: agent.name,
          userIndustry: agent.industry || detectedIndustry,
          currentDate: new Date().toISOString().split('T')[0],
          currentTime: new Date().toTimeString().split(' ')[0].substring(0, 5)
        }
      );
      
      // 5. Preparar mensajes con prompt enriquecido para Function Calling
      const enhancedPrompt = this.buildEnhancedPromptForFunctions(
        industryPrompt.systemPrompt,
        businessContext,
        mcpConfig,
        industryPrompt.tools
      );

      const messages = [
        {
          role: "system",
          content: enhancedPrompt
        },
        ...conversationHistory
      ];

      console.log('üõ†Ô∏è Using Function Calling with', functionContext);

      // 4. Ejecutar Function Calling
      const mcpResponse = await functionCallingService.generateWithFunctions(
        messages,
        functionContext,
        {
          model: agent.model || 'gpt-5-mini',
          temperature: agent.temperature,
          maxTokensPerMessage: agent.maxTokensPerMessage,
          reasoningEffort: agent.reasoningEffort,
          verbosity: agent.verbosity
        }
      );

      // 5. Log function calls para debugging
      if (mcpResponse.toolsUsed && mcpResponse.toolsUsed.length > 0) {
        await this.logFunctionCalls(
          conversation.id,
          agent.userId,
          agent.id,
          mcpResponse.toolsUsed,
          customerLead.phone,
          conversationHistory[conversationHistory.length - 1]?.content
        );
      }

      // 6. Retornar en formato compatible con sistema existente
      return {
        success: mcpResponse.success,
        message: mcpResponse.message,
        tokens_used: 0, // TODO: Implementar tracking de tokens para function calling
        model_used: agent.model || 'gpt-5-mini',
        customPrompt: true,
        userConfigured: true,
        // ‚úÖ NUEVO: Datos MCP
        mcpEnabled: true,
        toolsUsed: mcpResponse.toolsUsed || [],
        functionCalls: mcpResponse.functionCalls || 0,
        functionResults: mcpResponse.functionResults || [],
        industryDetected: detectedIndustry,
        industryPromptUsed: true
      };

    } catch (error) {
      console.error('‚ùå MCP Integration error:', error);
      
      // Fallback a OpenAI est√°ndar en caso de error
      console.log('üîÑ Falling back to standard OpenAI due to MCP error');
      
      return await openaiService.generateNaturalResponseWithCustomPrompt(
        conversationHistory,
        customPrompt,
        businessContext,
        currentIntent,
        agent.model,
        agent.temperature,
        agent.maxTokensPerMessage,
        agent.reasoningEffort,
        agent.verbosity
      );
    }
  }

  /**
   * Detectar industria del usuario para prompts especializados
   */
  detectUserIndustry(agent, customerLead, conversationHistory) {
    // 1. Verificar si el agente tiene industria definida
    if (agent.industry && industryPrompts.getTemplate(agent.industry)) {
      console.log('üéØ Using agent defined industry:', agent.industry);
      return agent.industry;
    }
    
    // 2. Verificar tags del cliente
    const leadTags = customerLead.tags || [];
    for (const tag of leadTags) {
      const detectedFromTag = industryPrompts.detectIndustry('', [tag]);
      if (detectedFromTag !== 'ecommerce') {
        console.log('üè∑Ô∏è Industry detected from customer tags:', detectedFromTag);
        return detectedFromTag;
      }
    }
    
    // 3. Analizar mensaje m√°s reciente
    const lastMessage = conversationHistory[conversationHistory.length - 1];
    if (lastMessage && lastMessage.content) {
      const detectedFromMessage = industryPrompts.detectIndustry(lastMessage.content);
      if (detectedFromMessage !== 'ecommerce') {
        console.log('üí¨ Industry detected from message:', detectedFromMessage);
        return detectedFromMessage;
      }
    }
    
    // 4. Analizar historial completo para patrones
    const allMessages = conversationHistory
      .map(m => m.content)
      .join(' ')
      .toLowerCase();
    
    const detectedFromHistory = industryPrompts.detectIndustry(allMessages);
    console.log('üìö Industry detected from conversation history:', detectedFromHistory);
    
    return detectedFromHistory;
  }
  
  /**
   * Construir prompt enriquecido que instruye al modelo sobre las funciones disponibles
   */
  buildEnhancedPromptForFunctions(originalPrompt, businessContext, mcpConfig, industryTools = []) {
    const functionsGuide = `
üõ†Ô∏è HERRAMIENTAS DISPONIBLES:
Tienes acceso a las siguientes herramientas para ayudar al cliente:

${mcpConfig.sendMultimedia ? `
üìé send_multimedia: Env√≠a archivos multimedia (men√∫s, cat√°logos, documentos)
- Usa cuando el cliente solicite ver men√∫s, precios, cat√°logos, etc.
- Tipos disponibles: menu, catalogue, document, image, price_list, location
` : ''}

${mcpConfig.saveData ? `
üíæ save_conversation_data: Guarda informaci√≥n importante de la conversaci√≥n
- Usa para guardar pedidos, citas, quejas, datos de contacto
- Tipos: order, appointment, inquiry, lead, complaint, feedback
` : ''}

${mcpConfig.analyzeIntent ? `
üß† analyze_customer_intent: Analiza la intenci√≥n del cliente y actualiza su perfil
- Usa para calificar leads y entender mejor las necesidades del cliente
- Actualiza scores de calificaci√≥n y tags autom√°ticamente
` : ''}

${mcpConfig.scheduleFollowUp ? `
‚è∞ schedule_follow_up: Programa seguimientos autom√°ticos
- Usa para recordatorios, confirmaciones, ofertas especiales
- Tipos: reminder, check_in, offer, survey, appointment_confirm
` : ''}

INSTRUCCIONES PARA USO DE HERRAMIENTAS:
1. Usa las herramientas de forma proactiva cuando sea apropiado
2. No preguntes al usuario si puede usar herramientas, √∫salas cuando sea necesario
3. Si usas una herramienta, explica brevemente qu√© hiciste
4. Siempre mant√©n el tono conversacional y natural

`;

    return `${originalPrompt}

${functionsGuide}

Contin√∫a la conversaci√≥n de forma natural, usando las herramientas cuando sea apropiado para brindar el mejor servicio al cliente.`;
  }

  /**
   * Obtener configuraci√≥n MCP del usuario
   */
  async getMCPConfiguration(userId) {
    try {
      let config = await prisma.mCPConfiguration.findUnique({
        where: { userId }
      });

      // Crear configuraci√≥n por defecto si no existe
      if (!config) {
        config = await prisma.mCPConfiguration.create({
          data: {
            userId,
            mcpEnabled: true, // ‚úÖ Habilitado por defecto para nuevos usuarios
            provider: 'openai_functions',
            sendMultimedia: true,
            saveData: true,
            analyzeIntent: true,
            scheduleFollowUp: true
          }
        });
        console.log('‚úÖ Created default MCP configuration for user:', userId);
      }

      return config;
    } catch (error) {
      console.error('‚ùå Error getting MCP configuration:', error);
      // Fallback configuration
      return {
        mcpEnabled: false,
        provider: 'openai_functions',
        sendMultimedia: false,
        saveData: false,
        analyzeIntent: false,
        scheduleFollowUp: false
      };
    }
  }

  /**
   * Log function calls para debugging y analytics
   */
  async logFunctionCalls(conversationId, userId, agentId, toolsUsed, customerPhone, triggerMessage) {
    try {
      for (const toolName of toolsUsed) {
        await prisma.functionCallLog.create({
          data: {
            conversationId,
            userId,
            agentId,
            functionName: toolName,
            functionArgs: {}, // TODO: Capturar args reales
            functionResult: {}, // TODO: Capturar resultados reales
            success: true,
            customerPhone,
            triggerMessage: triggerMessage?.substring(0, 500) // Truncar mensaje largo
          }
        });
      }
      
      console.log('üìä Logged', toolsUsed.length, 'function calls');
    } catch (error) {
      console.error('‚ùå Error logging function calls:', error);
      // No fallar por esto, es solo logging
    }
  }

  /**
   * ‚úÖ M√âTODO DE MIGRACI√ìN: Habilitar MCP para usuarios existentes
   */
  async enableMCPForExistingUsers() {
    try {
      console.log('üîÑ Enabling MCP for existing users...');
      
      const usersWithoutMCP = await prisma.user.findMany({
        where: {
          mcpConfiguration: null,
          crmEnabled: true // Solo usuarios con CRM habilitado
        },
        select: { id: true, email: true }
      });

      console.log(`Found ${usersWithoutMCP.length} users without MCP configuration`);

      for (const user of usersWithoutMCP) {
        await prisma.mCPConfiguration.create({
          data: {
            userId: user.id,
            mcpEnabled: true,
            provider: 'openai_functions',
            sendMultimedia: true,
            saveData: true,
            analyzeIntent: true,
            scheduleFollowUp: true
          }
        });
        
        console.log(`‚úÖ MCP enabled for user: ${user.email}`);
      }

      return {
        success: true,
        usersEnabled: usersWithoutMCP.length
      };
    } catch (error) {
      console.error('‚ùå Error enabling MCP for existing users:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = new MCPIntegrationService();
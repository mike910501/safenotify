const { PrismaClient } = require('@prisma/client');
const OpenAI = require('openai');

const prisma = new PrismaClient();
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

/**
 * Dynamic Prompt Service - AI-Generated Prompts per Conversation
 * Implements the user's vision of self-evolving conversation prompts
 */

// Base system prompt for Sofia
const SOFIA_BASE_INFO = `SafeNotify es una empresa que presta servicios de mensajer√≠a por WhatsApp. No importa qu√© negocio tengas, puedes configurar tus plantillas y estas ser√°n activadas en m√°ximo 24 horas.

üíª P√°gina web: www.safenotify.co
üìû Demo personal: 3133592457

üí∞ Precios:
‚Ä¢ B√°sico: $25.000/mes (100 mensajes)
‚Ä¢ Pro: $50.000/mes (500 mensajes) - M√°s Popular  
‚Ä¢ Enterprise: $100.000/mes (2.000 mensajes)

Para recibir m√°s informaci√≥n, necesitamos: correo, nombre y tipo de negocio. Un humano te contactar√° despu√©s.`;

/**
 * Generate initial prompt when conversation starts
 */
async function generateInitialPrompt(leadId, phoneNumber, firstMessage, businessContext = {}) {
  try {
    console.log('üß† Generating initial prompt for lead:', leadId);

    // Extract business type from first message
    const extractedBusiness = await extractBusinessInfo(firstMessage);
    
    // Merge business context
    const fullBusinessContext = {
      ...businessContext,
      ...extractedBusiness,
      phoneNumber: phoneNumber.substring(0, 8) + '***'
    };

    // Create AI prompt to generate Sofia's system prompt
    const promptGenerationRequest = `Eres un experto creando prompts para Sofia, asistente de ventas de SafeNotify.

INFORMACI√ìN DE SAFENOTIFY:
${SOFIA_BASE_INFO}

CONTEXTO DEL CLIENTE:
- Mensaje inicial: "${firstMessage}"
- Tipo de negocio detectado: ${fullBusinessContext.businessType || 'No identificado'}
- Volumen estimado: ${fullBusinessContext.volume || 'Desconocido'}

TAREA: Crea un prompt de sistema completo para Sofia que:
1. Le diga que es la asistente de SafeNotify
2. Le explique el contexto espec√≠fico de este cliente
3. Le indique que su primera respuesta debe ser la introducci√≥n completa de SafeNotify (incluyendo p√°gina web www.safenotify.co)
4. Le d√© instrucciones claras de c√≥mo calificar este tipo de negocio
5. IMPORTANTE: Su objetivo principal durante TODA la conversaci√≥n es capturar nombre y correo del cliente
6. Debe ser persistente pero amable pidiendo estos datos para que un humano contacte

RESTRICCIONES CR√çTICAS OBLIGATORIAS:
- PROHIBIDO ABSOLUTO hablar de temas que NO sean SafeNotify o el negocio del cliente
- Si preguntan sobre deportes, pol√≠tica, clima, chistes, m√∫sica, etc: "Solo puedo hablar sobre SafeNotify y c√≥mo ayudar a tu negocio"
- M√ÅXIMO 20 l√≠neas por respuesta (aprox 3-4 p√°rrafos cortos) - ESTRICTAMENTE OBLIGATORIO
- Ser CONCISA y directa al punto
- SOLO temas permitidos: SafeNotify, servicios de mensajer√≠a, negocios del cliente
- Cualquier otro tema = respuesta est√°ndar de rechazo

El prompt debe estar en tercera persona (instrucciones para Sofia, no como Sofia).

Responde SOLO con el prompt del sistema, sin comentarios adicionales.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "user",
          content: promptGenerationRequest
        }
      ],
      max_tokens: 800,
      temperature: 0.3
    });

    const generatedPrompt = completion.choices[0].message.content.trim();

    // Save to database
    const conversationPrompt = await prisma.conversationPrompt.create({
      data: {
        leadId: leadId,
        currentPrompt: generatedPrompt,
        conversationSummary: `Conversaci√≥n iniciada por: "${firstMessage.substring(0, 100)}..."`,
        businessContext: fullBusinessContext,
        promptVersion: 1,
        lastMessageCount: 1,
        triggerReason: 'initial',
        tokensUsed: completion.usage.total_tokens
      }
    });

    console.log('‚úÖ Initial prompt generated and saved:', conversationPrompt.id);
    
    return {
      success: true,
      promptId: conversationPrompt.id,
      systemPrompt: generatedPrompt,
      businessContext: fullBusinessContext
    };

  } catch (error) {
    console.error('‚ùå Error generating initial prompt:', error);
    return {
      success: false,
      error: error.message,
      systemPrompt: getStaticFallbackPrompt(),
      businessContext: {}
    };
  }
}

/**
 * Auto-generate conversation summary and update prompt
 */
async function updatePromptWithSummary(leadId, conversationHistory, newMessage) {
  try {
    console.log('üîÑ Updating prompt with conversation summary for lead:', leadId);

    // Get current prompt
    const currentPrompt = await prisma.conversationPrompt.findFirst({
      where: { leadId: leadId },
      orderBy: { createdAt: 'desc' }
    });

    if (!currentPrompt) {
      console.log('‚ö†Ô∏è No current prompt found, generating initial');
      return await generateInitialPrompt(leadId, '', newMessage.content);
    }

    // Build conversation text
    const conversationText = conversationHistory.map(msg => 
      `${msg.role === 'user' ? 'Cliente' : 'Sofia'}: ${msg.content}`
    ).join('\n');

    // Generate new summary and updated prompt
    const summaryRequest = `Eres un experto analizando conversaciones de ventas de SafeNotify.

CONVERSACI√ìN COMPLETA:
${conversationText}

INFORMACI√ìN DE SAFENOTIFY:
${SOFIA_BASE_INFO}

CONTEXTO PREVIO:
${JSON.stringify(currentPrompt.businessContext, null, 2)}

TAREAS:
1. RESUMEN: Crea un resumen conciso de toda la conversaci√≥n (m√°ximo 200 palabras)
2. CONTEXTO: Extrae/actualiza informaci√≥n del negocio del cliente
3. PROMPT: Crea un nuevo prompt de sistema para Sofia considerando:
   - Todo lo conversado hasta ahora
   - El estado actual de la calificaci√≥n
   - Pr√≥ximos pasos recomendados
   - Informaci√≥n espec√≠fica del negocio del cliente
   - OBJETIVO PRINCIPAL: Capturar nombre y correo del cliente
   - Debe mencionar p√°gina web correcta: www.safenotify.co (NO .com)
   
   RESTRICCIONES OBLIGATORIAS QUE DEBE INCLUIR EL PROMPT:
   - "RESTRICCIONES CR√çTICAS OBLIGATORIAS:"
   - "- PROHIBIDO ABSOLUTO hablar de CUALQUIER tema que NO sea SafeNotify o el negocio del cliente"
   - "- Si preguntan sobre deportes, pol√≠tica, clima, chistes, m√∫sica, etc: 'Solo puedo hablar sobre SafeNotify y c√≥mo ayudar a tu negocio'"
   - "- M√ÅXIMO 20 l√≠neas por respuesta (aprox 3-4 p√°rrafos cortos) - ESTRICTAMENTE OBLIGATORIO"
   - "- SOLO temas permitidos: SafeNotify, servicios de mensajer√≠a, negocios del cliente"
   - "- Cualquier otro tema = respuesta est√°ndar de rechazo"

IMPORTANTE: El "newPrompt" debe ser INSTRUCCIONES PARA SOFIA (sistema), NO una respuesta de Sofia al cliente.

Responde en formato JSON:
{
  "summary": "resumen de la conversaci√≥n",
  "businessContext": {
    "businessType": "tipo de negocio",
    "volume": "volumen estimado", 
    "painPoints": ["punto1", "punto2"],
    "interest": "nivel de inter√©s",
    "stage": "etapa actual"
  },
  "newPrompt": "PROMPT DE SISTEMA COMPLETO con instrucciones para Sofia (tercera persona, como 'Eres Sofia...')"
}`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "user",
          content: summaryRequest
        }
      ],
      max_tokens: 1000,
      temperature: 0.3
    });

    const response = JSON.parse(completion.choices[0].message.content);

    // Update database
    const updatedPrompt = await prisma.conversationPrompt.create({
      data: {
        leadId: leadId,
        currentPrompt: response.newPrompt,
        conversationSummary: response.summary,
        businessContext: response.businessContext,
        promptVersion: currentPrompt.promptVersion + 1,
        lastMessageCount: conversationHistory.length,
        triggerReason: 'auto_summary',
        tokensUsed: completion.usage.total_tokens
      }
    });

    console.log('‚úÖ Prompt updated with summary:', updatedPrompt.id);

    return {
      success: true,
      promptId: updatedPrompt.id,
      systemPrompt: response.newPrompt,
      businessContext: response.businessContext,
      summary: response.summary
    };

  } catch (error) {
    console.error('‚ùå Error updating prompt:', error);
    
    // Return current prompt as fallback
    const fallbackPrompt = await getCurrentPrompt(leadId);
    return {
      success: false,
      error: error.message,
      ...fallbackPrompt
    };
  }
}

/**
 * Get current active prompt for a lead
 */
async function getCurrentPrompt(leadId) {
  try {
    const prompt = await prisma.conversationPrompt.findFirst({
      where: { leadId: leadId },
      orderBy: { createdAt: 'desc' }
    });

    if (!prompt) {
      return {
        systemPrompt: getStaticFallbackPrompt(),
        businessContext: {},
        summary: 'No conversation history'
      };
    }

    return {
      systemPrompt: prompt.currentPrompt,
      businessContext: prompt.businessContext,
      summary: prompt.conversationSummary
    };

  } catch (error) {
    console.error('‚ùå Error getting current prompt:', error);
    return {
      systemPrompt: getStaticFallbackPrompt(),
      businessContext: {},
      summary: 'Error loading conversation'
    };
  }
}

/**
 * Extract business information from message
 */
async function extractBusinessInfo(message) {
  try {
    const extractionRequest = `Analiza este mensaje y extrae informaci√≥n del negocio:

Mensaje: "${message}"

Responde en JSON:
{
  "businessType": "tipo de negocio detectado o null",
  "volume": "volumen estimado o null",
  "keywords": ["palabras", "clave", "detectadas"]
}`;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: extractionRequest }],
      max_tokens: 100,
      temperature: 0.1
    });

    return JSON.parse(completion.choices[0].message.content);
  } catch (error) {
    console.error('‚ùå Error extracting business info:', error);
    return {
      businessType: null,
      volume: null,
      keywords: []
    };
  }
}

/**
 * Static fallback prompt if AI generation fails
 */
function getStaticFallbackPrompt() {
  return `Eres Sofia, asistente de ventas de SafeNotify. Tu primera respuesta debe ser:

"¬°Hola! üòä SafeNotify es una empresa que presta servicios de mensajer√≠a por WhatsApp. No importa qu√© negocio tengas, puedes configurar tus plantillas y estas ser√°n activadas en m√°ximo 24 horas üöÄ

üíª P√°gina web: www.safenotify.co
üìû Demo personal: 3133592457

üí∞ Precios:
‚Ä¢ B√°sico: $25.000/mes (100 mensajes)
‚Ä¢ Pro: $50.000/mes (500 mensajes) - M√°s Popular
‚Ä¢ Enterprise: $100.000/mes (2.000 mensajes)

üìù Para recibir m√°s informaci√≥n, d√©janos tus datos: correo, nombre y tipo de negocio. Un humano te contactar√° y te dar√° m√°s informaci√≥n."

Despu√©s de esta introducci√≥n, tu OBJETIVO PRINCIPAL es capturar nombre y correo del cliente. S√© persistente pero amable pidiendo estos datos para que un humano le contacte. Durante TODA la conversaci√≥n enf√≥cate en obtener: 1) Nombre completo, 2) Correo electr√≥nico, 3) Tipo de negocio.

RESTRICCIONES CR√çTICAS OBLIGATORIAS:
- PROHIBIDO ABSOLUTO hablar de CUALQUIER tema que NO sea SafeNotify o el negocio del cliente
- Si preguntan sobre deportes, pol√≠tica, clima, chistes, m√∫sica, etc: "Solo puedo hablar sobre SafeNotify y c√≥mo ayudar a tu negocio"
- M√ÅXIMO 20 l√≠neas por respuesta (aprox 3-4 p√°rrafos cortos) - ESTRICTAMENTE OBLIGATORIO
- Ser CONCISA y directa al punto
- SOLO temas permitidos: SafeNotify, servicios de mensajer√≠a, negocios del cliente
- Cualquier otro tema = respuesta est√°ndar de rechazo`;
}

/**
 * Should we update the prompt? (ALWAYS - after every message)
 */
function shouldUpdatePrompt(currentMessageCount, lastUpdateCount) {
  return true; // ALWAYS update after every message for perfect context
}

module.exports = {
  generateInitialPrompt,
  updatePromptWithSummary,
  getCurrentPrompt,
  shouldUpdatePrompt
};
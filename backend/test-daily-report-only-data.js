require('dotenv').config();
const { getTodaysConversationPrompts, getTodaysNewLeads, generateEmailReport } = require('./services/dailyReportService');

/**
 * Test script to generate daily report data without sending email
 * Shows what the system would send
 */

async function testReportData() {
  try {
    console.log('üìä GENERANDO REPORTE DE DATOS DEL D√çA...');
    console.log('=' .repeat(60));
    
    // Get today's data
    console.log('\nüîç Recopilando datos del d√≠a...');
    const [prompts, newLeads] = await Promise.all([
      getTodaysConversationPrompts(),
      getTodaysNewLeads()
    ]);
    
    console.log(`‚úÖ Datos recopilados: ${newLeads.length} nuevos leads, ${prompts.length} conversaciones`);
    
    // Show summary
    console.log('\nüìà RESUMEN EJECUTIVO:');
    console.log(`‚îå‚îÄ Fecha: ${new Date().toLocaleDateString('es-CO')}`);
    console.log(`‚îú‚îÄ Hora: ${new Date().toLocaleTimeString('es-CO')}`);
    console.log(`‚îú‚îÄ Nuevos Leads: ${newLeads.length}`);
    console.log(`‚îú‚îÄ Conversaciones Activas: ${prompts.length}`);
    console.log(`‚îî‚îÄ Destino Email: mikehuertas91@gmail.com`);
    
    // Show new leads details
    if (newLeads.length > 0) {
      console.log('\nüë• NUEVOS LEADS DEL D√çA:');
      console.log('=' .repeat(50));
      newLeads.forEach((lead, index) => {
        const phone = lead.phone.substring(0, 8) + '***';
        console.log(`\nüì± Lead #${index + 1}:`);
        console.log(`   ‚îú‚îÄ Tel√©fono: ${phone}`);
        console.log(`   ‚îú‚îÄ Nombre: ${lead.name || 'Sin nombre'}`);
        console.log(`   ‚îú‚îÄ Score: ${lead.qualificationScore}`);
        console.log(`   ‚îú‚îÄ Estado: ${lead.status}`);
        console.log(`   ‚îî‚îÄ Hora: ${lead.createdAt.toLocaleTimeString('es-CO')}`);
      });
    } else {
      console.log('\nüë• No hay nuevos leads el d√≠a de hoy.');
    }
    
    // Show conversation summaries
    if (prompts.length > 0) {
      console.log('\nüí¨ CONVERSACIONES DEL D√çA:');
      console.log('=' .repeat(50));
      prompts.forEach((prompt, index) => {
        const phone = prompt.lead.phone.substring(0, 8) + '***';
        console.log(`\nüó£Ô∏è Conversaci√≥n #${index + 1}:`);
        console.log(`   ‚îú‚îÄ Cliente: ${prompt.lead.name || 'Sin nombre'}`);
        console.log(`   ‚îú‚îÄ Tel√©fono: ${phone}`);
        console.log(`   ‚îú‚îÄ Score: ${prompt.lead.qualificationScore}`);
        console.log(`   ‚îú‚îÄ Estado: ${prompt.lead.status}`);
        console.log(`   ‚îú‚îÄ Hora: ${prompt.createdAt.toLocaleTimeString('es-CO')}`);
        console.log(`   ‚îú‚îÄ Resumen: "${(prompt.conversationSummary || 'Sin resumen').substring(0, 80)}..."`);
        if (prompt.businessContext) {
          console.log(`   ‚îî‚îÄ Contexto: ${JSON.stringify(prompt.businessContext).substring(0, 100)}...`);
        }
      });
    } else {
      console.log('\nüí¨ No hay conversaciones registradas el d√≠a de hoy.');
    }
    
    // Generate email report (but don't send)
    console.log('\nüìß Generando contenido HTML del reporte...');
    const htmlContent = generateEmailReport(prompts, newLeads);
    console.log(`‚úÖ Reporte HTML generado: ${htmlContent.length} caracteres`);
    
    console.log('\nüéØ AN√ÅLISIS INSIGHT:');
    console.log('=' .repeat(40));
    
    if (prompts.length > 0) {
      // Analyze business types mentioned
      const businessTypes = new Set();
      const sectors = new Set();
      
      prompts.forEach(prompt => {
        if (prompt.businessContext) {
          const context = typeof prompt.businessContext === 'string' 
            ? JSON.parse(prompt.businessContext) 
            : prompt.businessContext;
          
          if (context.businessType || context.sector) {
            businessTypes.add(context.businessType || context.sector);
          }
          if (context.sector) sectors.add(context.sector);
        }
      });
      
      console.log(`üìä Tipos de negocio detectados: ${[...businessTypes].join(', ') || 'No especificados'}`);
      console.log(`üè¢ Sectores identificados: ${[...sectors].join(', ') || 'No especificados'}`);
    }
    
    if (newLeads.length > 0) {
      const avgScore = newLeads.reduce((sum, lead) => sum + lead.qualificationScore, 0) / newLeads.length;
      console.log(`üéØ Score promedio de nuevos leads: ${avgScore.toFixed(1)}`);
    }
    
    console.log('\n‚úÖ SISTEMA COMPLETAMENTE FUNCIONAL');
    console.log('üìß Email se enviar√° autom√°ticamente a las 5 PM');
    console.log('üöÄ Para testing manual: POST /api/test-daily-report');
    console.log('=' .repeat(60));
    
  } catch (error) {
    console.error('‚ùå Error en test de datos:', error);
    process.exit(1);
  }
}

// Run the test
testReportData()
  .then(() => {
    console.log('\nüéâ Test de datos completado exitosamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Test fall√≥:', error);
    process.exit(1);
  });
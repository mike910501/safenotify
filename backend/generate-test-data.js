require('dotenv').config();
const axios = require('axios');

async function generateTestData() {
  console.log('üîÑ Generating test data for GPT-5 models...');
  
  const messages = [
    'Hola Sofia, necesito informaci√≥n sobre SafeNotify',
    'Cuales son los precios de SafeNotify?',  
    'Me interesa la funcionalidad de WhatsApp masivo',
    'Qu√© incluye el plan profesional?',
    'Necesito agendar una demo',
    'Cu√°ntos mensajes puedo enviar al mes?',
    'SafeNotify es compatible con otros CRMs?',
    'Tienen soporte t√©cnico?',
    'Me gustaria m√°s informaci√≥n sobre el ROI',
    'Cu√°l es la diferencia entre los planes?'
  ];
  
  for (let i = 0; i < messages.length; i++) {
    try {
      console.log(`üì§ Enviando mensaje ${i + 1}/${messages.length}: ${messages[i].substring(0, 30)}...`);
      
      const response = await axios.post('http://localhost:3005/api/webhooks/sofia-sales', 
        new URLSearchParams({
          From: `whatsapp:+57310000${i.toString().padStart(4, '0')}`, // N√∫meros √∫nicos
          To: `whatsapp:${process.env.TWILIO_WHATSAPP_NUMBER}`,
          Body: messages[i],
          ProfileName: `Test User ${i + 1}`
        }),
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        }
      );
      
      if (response.status === 200) {
        console.log(`‚úÖ Mensaje ${i + 1} procesado`);
      } else {
        console.log(`‚ö†Ô∏è Mensaje ${i + 1} status: ${response.status}`);
      }
      
      // Esperar un poco entre mensajes
      await new Promise(resolve => setTimeout(resolve, 2000));
      
    } catch (error) {
      console.error(`‚ùå Error en mensaje ${i + 1}:`, error.message);
    }
  }
  
  console.log('‚úÖ Test data generation completed!');
  
  // Wait a bit then check the database
  console.log('üîç Waiting 5 seconds then checking database...');
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  // Check updated stats
  const { PrismaClient } = require('@prisma/client');
  const prisma = new PrismaClient();
  
  try {
    const modelStats = await prisma.gPTUsage.groupBy({
      by: ['model'],
      _count: { model: true },
      _sum: { tokensUsed: true, estimatedCost: true }
    });
    
    console.log('\nüìà Updated model usage statistics:');
    modelStats.forEach(stat => {
      console.log(`- ${stat.model || 'unknown'}: ${stat._count.model} uses, ${stat._sum.tokensUsed || 0} tokens, $${(stat._sum.estimatedCost || 0).toFixed(4)}`);
    });
  } catch (error) {
    console.error('‚ùå Database check error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

generateTestData();
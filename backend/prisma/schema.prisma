generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  name           String?
  role           String          @default("user")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  planType       String          @default("free")
  planExpiry     DateTime?
  messagesUsed   Int             @default(0)
  messagesLimit  Int             @default(10)
  
  // ðŸš€ CRM FIELDS FOR USER CLIENTS
  crmEnabled        Boolean   @default(false)    // If they enabled CRM
  crmPlan           String    @default("basic")  // "basic", "pro", "enterprise"
  maxAgents         Int       @default(1)        // Agent limit per CRM plan
  maxWhatsAppNumbers Int      @default(1)        // WhatsApp numbers allowed
  
  // EXISTING RELATIONS
  apiKeys        ApiKey[]
  campaigns      Campaign[]
  passwordResets PasswordReset[]
  payments       Payment[]
  templates      Template[]
  clientFunnels  ClientFunnel[]  // New relation for funnel system
  
  // ðŸš€ CRM RELATIONS
  whatsappNumbers   UserWhatsAppNumber[] @relation("UserWhatsApp")
  aiAgents          UserAIAgent[]        @relation("UserAgents")
  customerLeads     CustomerLead[]       @relation("UserCustomerLeads")
  crmConversations  CRMConversation[]    @relation("UserConversations")
  assignedConversations CRMConversation[] @relation("AssignedConversations")
  crmMetrics        CRMMetrics[]         @relation("UserCRMMetrics")
  takeoverLogs      ConversationTakeoverLog[]  // Takeover events performed by this user
  crmNotifications  CRMNotification[]    // Notifications for this user
  crmFeedback       CRMFeedback[]        // Feedback submitted by this user

  @@map("users")
}

model Campaign {
  id            String       @id @default(cuid())
  name          String
  templateId    String?
  status        String       @default("draft")
  totalContacts Int          @default(0)
  sentCount     Int          @default(0)
  errorCount    Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sentAt        DateTime?
  userId        String
  template      Template?    @relation(fields: [templateId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      MessageLog[]

  @@map("campaigns")
}

model Template {
  id                    String     @id @default(cuid())
  name                  String
  content               String
  category              String     @default("general")
  variables             String[]
  status                String     @default("ai_pending")
  isPublic              Boolean    @default(false)
  aiApproved            Boolean    @default(false)
  aiScore               Int?
  aiReasons             String[]
  aiSuggestions         String[]
  twilioTemplateId      String?
  twilioSid             String?
  adminReviewedBy       String?
  adminReviewedAt       DateTime?
  adminNotes            String?
  usageCount            Int        @default(0)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  userId                String?
  businessCategory      String     @default("UTILITY")
  footerText            String?
  headerText            String?
  language              String     @default("es")
  twilioContentSid      String?
  variablesMapping      Json?
  buttonsConfig         Json?
  hasInteractiveButtons Boolean    @default(false)
  templateType          String     @default("TEXT")
  campaigns             Campaign[]
  user                  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("templates")
}

model MessageLog {
  id          String    @id @default(cuid())
  phone       String
  status      String
  messageSid  String?
  error       String?
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
  campaignId  String
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("message_logs")
}

model Payment {
  id                 String    @id @default(cuid())
  reference          String    @unique
  amount             Float
  currency           String    @default("COP")
  status             String
  wompiTransactionId String?   @unique
  planType           String
  processedAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model ApiKey {
  id        String    @id @default(cuid())
  key       String    @unique
  name      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  lastUsed  DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model WhatsAppConfig {
  id                 String   @id @default(cuid())
  twilioAccountSid   String
  twilioAuthToken    String
  whatsappNumber     String
  businessAccountId  String?
  rateLimitPerMinute Int      @default(20)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("whatsapp_config")
}

// ===== IA CONVERSATIONAL MODELS =====

enum SafeNotifyLeadStatus {
  new
  qualified
  demo_scheduled
  demo_completed
  converted
  lost
  nurturing
}

enum ClientFunnelLeadStatus {
  new
  qualified
  interested
  appointment_scheduled
  appointment_completed
  converted
  lost
  nurturing
}

// Sofia IA - SafeNotify Sales Leads
model SafeNotifyLead {
  id                    String                 @id @default(cuid())
  phone                 String                 @unique
  name                  String?
  email                 String?
  clinicName            String?
  specialty             String?
  industry              String?
  source                String                 @default("whatsapp")
  
  // Qualification data
  monthlyPatients       Int?
  currentSystem         String?
  whatsappUsage         String?
  complianceAwareness   Boolean                @default(false)
  qualificationScore    Int                    @default(0)
  status                SafeNotifyLeadStatus   @default(new)
  grade                 String                 @default("C")
  
  // Conversation state
  conversationState     String                 @default("initial")
  lastIntent            String?
  isActive              Boolean                @default(true)
  lastActivity          DateTime               @default(now())
  
  // Business data
  companySize           String?                // small, medium, large
  budget                String?                // low, medium, high  
  timeline              String?                // immediate, month, quarter, later
  authority             String?                // decision_maker, influencer, user
  currentSolution       String?
  painPoints            String[]
  biggestPainPoint      String?
  noShowRate            String?
  staffSize             String?
  
  // Demo tracking
  demoScheduledAt       DateTime?
  demoCompleted         Boolean                @default(false)
  conversionDate        DateTime?
  
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  
  // Relations
  conversations         SafeNotifyConversation[]
  demoAppointments      SafeNotifyDemo[]
  conversationPrompts   ConversationPrompt[]
  
  @@map("safenotify_leads")
}

model SafeNotifyConversation {
  id              String           @id @default(cuid())
  leadId          String
  sessionId       String           @unique
  
  // Conversation data
  messages        Json[]           // {role, content, timestamp, messageSid?}
  intent          String?          // info_safenotify, demo_request, pricing_safenotify
  currentStep     String           @default("greeting")
  isActive        Boolean          @default(true)
  
  // Sofia IA specific
  personality     String           @default("sofia")
  objectionsHandled String[]
  contentSent     String[]         // Track multimedia content sent
  roiCalculated   Boolean          @default(false)
  
  // Handoff management
  handedOff       Boolean          @default(false)
  handoffReason   String?
  handoffTime     DateTime?
  salesRepAssigned String?
  
  // Metrics
  messageCount    Int              @default(0)
  responseTime    Float?           // Average in seconds
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  lead            SafeNotifyLead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  @@map("safenotify_conversations")
}

// Dynamic Conversation Prompts - Auto-generated by AI
model ConversationPrompt {
  id                  String               @id @default(cuid())
  leadId              String
  conversationId      String?
  
  // AI-generated prompts
  currentPrompt       String               // Full AI prompt for current conversation state
  conversationSummary String               // AI-generated summary of entire conversation
  businessContext     Json                 // Extracted business info (type, volume, etc.)
  
  // Prompt evolution tracking
  promptVersion       Int                  @default(1)
  lastMessageCount    Int                  @default(0)
  triggerReason       String               // "initial", "auto_summary", "manual_update"
  
  // Performance tracking
  tokensUsed          Int?                 // OpenAI tokens for this prompt
  responseQuality     Float?               // Future: AI evaluation of responses
  
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  lead                SafeNotifyLead       @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  @@map("conversation_prompts")
}

model SafeNotifyDemo {
  id              String         @id @default(cuid())
  leadId          String
  
  // Demo details
  scheduledAt     DateTime
  duration        Int            @default(30) // minutes
  demoType        String         @default("full") // compliance, roi, full, custom
  status          String         @default("scheduled") // scheduled, completed, cancelled, no_show
  
  // Meeting details
  zoomLink        String?
  meetingId       String?
  calendarLink    String?
  salesRepEmail   String?
  
  // Follow-up tracking
  reminderSent    Boolean        @default(false)
  followupSent    Boolean        @default(false)
  outcome         String?        // converted, follow_up, not_interested, reschedule
  conversionProbability Int?     // 0-100
  notes           String?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  lead            SafeNotifyLead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  @@map("safenotify_demos")
}

// Content Library for SafeNotify sales
model SafeNotifyContent {
  id                String   @id @default(cuid())
  type              String   // video, pdf, infographic, calculator
  category          String   // compliance, roi, cases, product_demo, objection_handling
  title             String
  description       String?
  fileUrl           String
  thumbnailUrl      String?
  duration          Int?     // for videos in seconds
  
  // Targeting
  specialty         String[] // which medical specialties this content is for
  conversationStage String[] // which stages this content works for
  
  // Performance metrics
  usageCount        Int      @default(0)
  engagementRate    Float?   // 0-100
  conversionRate    Float?   // 0-100
  effectivenessScore Float?  // 0-100
  
  // A/B testing
  isVariant         Boolean  @default(false)
  originalContentId String?
  variantName       String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("safenotify_content")
}

// ===== CLIENT FUNNEL SYSTEM =====

model ClientFunnel {
  id                  String   @id @default(cuid())
  clientUserId        String   // FK to User (SafeNotify client)
  
  // Basic info
  funnelName          String
  serviceName         String
  serviceDescription  String?
  targetAudience      String
  industry            String
  monthlyGoal         Int?
  servicePrice        Float?
  
  // Technical setup
  whatsappNumber      String?  
  startCode           String?  // BOTOX_123, RESTAURANT_456
  
  // Integration settings
  calendarIntegration Json?    // Calendly/Google Calendar config
  paymentIntegration  Json?    // Wompi account config
  
  // AI Configuration
  aiPersonalityConfig Json?    // Personality, tone, speciality context
  status              String   @default("active") // active, paused, archived
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  client              User                    @relation(fields: [clientUserId], references: [id], onDelete: Cascade)
  content             FunnelContent[]
  configuration       FunnelConfiguration?
  leads               ClientFunnelLead[]
  analytics           FunnelAnalytics[]
  
  @@map("client_funnels")
}

model FunnelContent {
  id            String       @id @default(cuid())
  funnelId      String
  
  // Content organization
  stage         String       // contact, education, social_proof, closing
  contentType   String       // video, image, pdf, calculator
  title         String
  description   String?
  fileUrl       String
  thumbnailUrl  String?
  orderInStage  Int          @default(0)
  
  // A/B testing
  isVariant     Boolean      @default(false)
  variantName   String?
  
  // Performance metrics
  engagementMetrics Json?    // views, clicks, time spent
  conversionImpact  Float?   // impact on conversion rate
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  funnel        ClientFunnel @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  
  @@map("funnel_content")
}

model FunnelConfiguration {
  id                    String       @id @default(cuid())
  funnelId              String       @unique
  
  // AI Personality
  personalityName       String       @default("assistant")
  specialtyContext      String?      // medical, restaurant, fitness, etc.
  tone                  String       @default("professional") // professional, friendly, casual
  language              String       @default("es")
  
  // Conversation flow
  qualifyingQuestions   Json         // Array of questions
  scoringRules          Json         // Scoring logic
  objectionResponses    Json         // Common objections and responses
  
  // Automation settings
  automationConfig      Json?        // Follow-up sequences, timing
  followUpSequence      Json?        // Automated follow-up messages
  integrationSettings   Json?        // Calendar, payment, notification settings
  
  // Business rules
  autoHandoffScore      Int          @default(80)  // Score threshold for human handoff
  businessHours         Json?        // Operating hours
  maxFollowUps          Int          @default(3)
  
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  
  funnel                ClientFunnel @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  
  @@map("funnel_configurations")
}

model ClientFunnelLead {
  id                     String                   @id @default(cuid())
  funnelId               String
  
  // Basic info
  phone                  String
  name                   String?
  email                  String?
  
  // Qualification data (dynamic based on funnel)
  qualificationData      Json?                    // Flexible structure per funnel
  qualificationScore     Int                      @default(0)
  grade                  String                   @default("C") // A, B, C
  status                 ClientFunnelLeadStatus   @default(new)
  
  // Conversation tracking
  currentStage           String                   @default("initial")
  conversationState      String                   @default("greeting")
  contentConsumed        Json?                    // Array of content IDs consumed
  objectionsRaised       Json?                    // Objections and responses
  
  // Business metrics
  conversionProbability  Int?                     // 0-100
  estimatedValue         Float?                   // Expected revenue from this lead
  lastActivity           DateTime                 @default(now())
  
  // Appointment tracking
  appointmentScheduled   Boolean                  @default(false)
  appointmentDate        DateTime?
  appointmentCompleted   Boolean                  @default(false)
  conversionDate         DateTime?
  
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  
  // Relations
  funnel                 ClientFunnel             @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  conversations          FunnelConversation[]
  
  @@unique([funnelId, phone]) // One lead per phone per funnel
  @@map("client_funnel_leads")
}

model FunnelConversation {
  id                String             @id @default(cuid())
  funnelLeadId      String
  sessionId         String             @unique
  
  // Conversation data
  messages          Json[]             // {role, content, timestamp, messageSid?}
  currentAiContext  Json?              // AI context and state
  personalityUsed   String
  
  // Conversation state
  intent            String?            // service_info, appointment, pricing, support
  currentStep       String             @default("greeting")
  isActive          Boolean            @default(true)
  
  // Automation tracking
  automationTriggered Json?            // Which automations were triggered
  contentDelivered    String[]         // Content pieces delivered
  
  // Handoff management
  handoffStatus     String             @default("none") // none, requested, completed
  handoffReason     String?
  handoffTime       DateTime?
  
  // Metrics
  messageCount      Int                @default(0)
  averageResponseTime Float?           // In seconds
  engagementScore   Int?               // 0-100
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  funnelLead        ClientFunnelLead   @relation(fields: [funnelLeadId], references: [id], onDelete: Cascade)
  
  @@map("funnel_conversations")
}

model FunnelAnalytics {
  id                    String       @id @default(cuid())
  funnelId              String
  date                  DateTime     @default(now())
  
  // Daily metrics
  leadsGenerated        Int          @default(0)
  conversions           Int          @default(0)
  revenueGenerated      Float        @default(0)
  
  // Engagement metrics
  totalConversations    Int          @default(0)
  averageEngagementTime Float?       // Minutes
  contentEngagement     Json?        // Per content piece engagement
  
  // Conversion funnel
  stageConversionRates  Json?        // Conversion rates between stages
  
  // Performance indicators
  costPerLead           Float?
  costPerConversion     Float?
  returnOnInvestment    Float?       // ROI percentage
  
  // Optimization insights
  topPerformingContent  Json?        // Best performing content pieces
  commonDropOffPoints   Json?        // Where leads typically drop off
  optimizationSuggestions Json?      // AI-generated suggestions
  
  createdAt             DateTime     @default(now())
  
  funnel                ClientFunnel @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  
  @@unique([funnelId, date]) // One record per funnel per day
  @@map("funnel_analytics")
}

// AI Settings and Configuration
model AISettings {
  id                  String   @id @default(cuid())
  
  // AI Provider Configuration
  provider            String   @default("openai") // openai, anthropic
  model               String   @default("gpt-4")
  temperature         Float    @default(0.7)
  maxTokens          Int      @default(500)
  
  // SafeNotify Sales Configuration
  sofiaPersonality    Json?    // Sofia's personality configuration
  salesPhoneNumber    String?  // Dedicated number for SafeNotify sales
  
  // Global settings
  businessHours       Json?    // Global business hours
  globalRateLimit     Int      @default(60) // Messages per minute across all funnels
  
  // Content settings
  defaultGreeting     String   @default("Â¡Hola! Â¿En quÃ© puedo ayudarte hoy?")
  handoffMessage      String   @default("Te voy a conectar con uno de nuestros especialistas.")
  
  // Optimization settings
  autoOptimization    Boolean  @default(true)
  abTestingEnabled    Boolean  @default(true)
  analyticsRetention  Int      @default(365) // Days to retain analytics
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("ai_settings")
}

// GPT Token Usage Tracking - NEW
model GPTUsage {
  id                String   @id @default(cuid())
  
  // Request details
  leadId            String?
  phone             String
  conversationId    String?
  
  // Model and usage
  model             String   // gpt-5, gpt-5-mini, gpt-5-nano, gpt-4o, etc
  tokensUsed        Int
  estimatedCost     Float
  // âœ… GPT-5 tracking parameters
  reasoningEffort   String?  // minimal, low, medium, high
  verbosity         String?  // low, medium, high
  userConfigured    Boolean? @default(false)  // Was user configuration used?
  
  // Context
  intent            String?  // greeting, demo_request, roi_inquiry, etc
  leadScore         Int?     // Lead qualification score at time of request
  responseType      String   // conversation, sentiment_analysis, custom_prompt
  
  // Performance
  responseTime      Float?   // API response time in seconds
  success           Boolean  @default(true)
  errorMessage      String?
  
  // Business metrics
  leadValueBefore   Int?     // Lead score before interaction
  leadValueAfter    Int?     // Lead score after interaction
  conversionEvent   String?  // demo_scheduled, email_captured, etc
  
  createdAt         DateTime @default(now())
  
  @@map("gpt_usage")
  @@index([phone])
  @@index([model])
  @@index([createdAt])
}

// ============================================================================
// ðŸš€ CRM MODELS FOR USER CLIENTS
// ============================================================================

// Enums for CRM
enum CustomerLeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CONVERTED
  LOST
}

enum ConversationStatus {
  ACTIVE
  PAUSED
  WAITING
  COMPLETED
  ARCHIVED
  TRANSFERRED
}

enum ConversationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// WhatsApp Numbers per User
model UserWhatsAppNumber {
  id              String    @id @default(cuid())
  userId          String    // FK to User (SafeNotify client)
  
  // WhatsApp number info
  phoneNumber     String    @unique    // "+573001234567"
  displayName     String                // "Central Clinic"
  
  // Configuration
  isActive        Boolean   @default(true)
  isPrimary       Boolean   @default(false)   // User's primary number
  
  // Webhook & Twilio
  webhookUrl      String?   // Specific URL for this number
  twilioSid       String?   // Twilio SID for this number
  
  // Business hours configuration
  businessHours   Json?     // {"monday": {"start": "09:00", "end": "18:00"}}
  timezone        String    @default("America/Bogota")
  
  // Default agent for this number
  defaultAgentId  String?   // FK to UserAIAgent
  
  // Relations
  user            User      @relation("UserWhatsApp", fields: [userId], references: [id], onDelete: Cascade)
  defaultAgent    UserAIAgent? @relation("DefaultAgentForNumber", fields: [defaultAgentId], references: [id])
  conversations   CRMConversation[] @relation("ConversationWhatsApp")
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("user_whatsapp_numbers")
  @@index([userId])
  @@index([phoneNumber])
}

// AI Agents per User
model UserAIAgent {
  id                  String    @id @default(cuid())
  userId              String    // FK to User (SafeNotify client)
  
  // Agent identity
  name                String    // "Sales Assistant", "Support Bot"
  description         String?
  role                String    // "assistant", "sales", "support"
  
  // Agent state
  isActive            Boolean   @default(true)
  isDefault           Boolean   @default(false)  // Default agent for user
  
  // Agent personality prompts
  personalityPrompt   String    // Agent's personality
  businessPrompt      String    // Business context
  objectivesPrompt    String    // Agent objectives
  
  // AI Configuration
  model               String    @default("gpt-5-mini")  // âœ… Updated default to GPT-5
  temperature         Float     @default(0.7)
  maxTokensPerMessage Int       @default(500)
  // âœ… GPT-5 specific parameters
  reasoningEffort     String?   @default("medium")      // "minimal", "low", "medium", "high"
  verbosity           String?   @default("medium")      // "low", "medium", "high"
  responseStyle       Json?     // Custom response styling
  
  // Business rules
  businessRules       Json?     // Custom business rules
  triggerKeywords     String[]  // Keywords that trigger this agent
  
  // Working hours
  activeHours         Json?     // {"start": "09:00", "end": "18:00"}
  weekdaysOnly        Boolean   @default(false)
  
  // Relations
  user                User      @relation("UserAgents", fields: [userId], references: [id], onDelete: Cascade)
  conversations       CRMConversation[] @relation("ConversationAgent")
  prompts             UserAgentPrompt[] @relation("AgentPrompts")
  defaultForNumbers   UserWhatsAppNumber[] @relation("DefaultAgentForNumber")
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@map("user_ai_agents")
  @@index([userId])
  @@index([userId, isActive])
  @@unique([userId, name, isActive])
}

// Agent Prompt Evolution
model UserAgentPrompt {
  id              String    @id @default(cuid())
  agentId         String    // FK to UserAIAgent
  
  // Prompt content
  systemPrompt    String    // Complete system prompt
  contextSummary  String?   // Summary of context that generated this prompt
  businessContext Json?     // Business context data
  
  // Version control
  version         Int       // Prompt version number
  triggerReason   String    // "initial", "conversation_evolution", "manual_update"
  isActive        Boolean   @default(true)
  
  // Relations
  agent           UserAIAgent @relation("AgentPrompts", fields: [agentId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("user_agent_prompts")
  @@index([agentId])
  @@index([agentId, isActive])
  @@index([agentId, version])
}

// Customer Leads per User  
model CustomerLead {
  id                  String              @id @default(cuid())
  userId              String              // FK to User (SafeNotify client)
  
  // Customer identity
  name                String?
  email               String?
  phone               String              // Primary identifier
  
  // Lead source and status
  source              String              // "whatsapp", "website", "referral"
  status              CustomerLeadStatus  @default(NEW)
  qualificationScore  Int                 @default(0)   // 0-100
  
  // Business context
  businessType        String?             // "clinic", "restaurant", "retail"
  companyName         String?
  estimatedValue      Float?              // Potential deal value
  
  // Interaction tracking
  firstContact        DateTime            @default(now())
  lastActivity        DateTime            @default(now())
  nextFollowUp        DateTime?
  
  // Custom fields and tags
  customFields        Json?               // Flexible custom data
  tags                String[]            // User-defined tags
  notes               String?             // Internal notes
  
  // Relations
  user                User                @relation("UserCustomerLeads", fields: [userId], references: [id], onDelete: Cascade)
  conversations       CRMConversation[]   @relation("LeadConversations")
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  @@map("customer_leads")
  @@index([userId])
  @@index([userId, phone])
  @@index([userId, status])
  @@index([qualificationScore])
}

// Conversations per User
model CRMConversation {
  id                  String              @id @default(cuid())
  userId              String              // FK to User (SafeNotify client)
  customerLeadId      String              // FK to CustomerLead
  whatsappNumberId    String?             // FK to UserWhatsAppNumber (number used)
  
  // Conversation identity
  sessionId           String              @unique
  customerPhone       String              // Customer's phone
  
  // Conversation state
  status              ConversationStatus  @default(ACTIVE)
  currentStep         String              @default("greeting")
  priority            ConversationPriority @default(NORMAL)
  
  // AI and agent assignment
  currentAgentId      String?             // FK to UserAIAgent
  agentName           String?             // Agent name (legacy)
  
  // Conversation content
  messages            Json[]              @default([]) // Array of messages
  messageCount        Int                 @default(0)
  tags                String[]            @default([])  // Conversation tags
  
  // Assignment to humans
  assignedToUserId    String?             // FK to User (human assignment)
  assignedAt          DateTime?
  lastHumanResponse   DateTime?           // When human last responded
  
  // ðŸš€ PHASE 5.1: Human Takeover System
  humanTakeover       Boolean             @default(false)  // Is human controlling?
  takingOverUserId    String?             // FK to User who took over
  takeoverAt          DateTime?           // When takeover occurred
  takeoverReason      String?             // Why human took over
  aiSuggestions       Json[]              @default([])     // AI suggestions for human
  lastAiSuggestion    DateTime?           // When AI last provided suggestion
  collaborationMode   String              @default("ai_only")  // ai_only, human_only, collaboration
  takeoverRequested   Boolean             @default(false)  // Customer requested human
  escalationLevel     Int                 @default(0)      // 0=normal, 1=escalated, 2=urgent
  
  // Activity tracking
  firstMessage        DateTime            @default(now())
  lastActivity        DateTime            @default(now())
  lastMessageAt       DateTime?
  statusUpdatedAt     DateTime            @default(now())
  
  // Metadata
  metadata            Json?               // Flexible metadata
  
  // Relations
  user                User                @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)
  customerLead        CustomerLead        @relation("LeadConversations", fields: [customerLeadId], references: [id], onDelete: Cascade)
  currentAgent        UserAIAgent?        @relation("ConversationAgent", fields: [currentAgentId], references: [id])
  userWhatsAppNumber  UserWhatsAppNumber? @relation("ConversationWhatsApp", fields: [whatsappNumberId], references: [id])
  assignedToUser      User?               @relation("AssignedConversations", fields: [assignedToUserId], references: [id])
  takeoverLogs        ConversationTakeoverLog[]  // Human takeover events
  feedback            CRMFeedback[]       // Feedback for this conversation
  
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  @@map("crm_conversations")
  @@index([userId])
  @@index([userId, status])
  @@index([customerLeadId])
  @@index([currentAgentId])
  @@index([sessionId])
  @@index([lastActivity])
}

// ðŸš€ PHASE 5.1: Human Takeover Events Log
model ConversationTakeoverLog {
  id                  String              @id @default(cuid())
  conversationId      String              // FK to CRMConversation
  userId              String              // FK to User (who performed action)
  
  // Event details
  eventType           String              // 'takeover_requested', 'takeover_started', 'takeover_ended', 'ai_suggestion'
  fromMode            String              // Previous mode (ai_only, human_only, collaboration)
  toMode              String              // New mode
  reason              String?             // Why the takeover happened
  
  // Context
  customerMessage     String?             // Message that triggered takeover
  agentResponse       String?             // Response after takeover
  aiSuggestion        Json?               // AI suggestion data
  metadata            Json?               // Additional context
  
  createdAt           DateTime            @default(now())
  
  // Relations
  conversation        CRMConversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user                User                @relation(fields: [userId], references: [id])
  
  @@map("conversation_takeover_logs")
  @@index([conversationId])
  @@index([userId])
  @@index([eventType])
}

// ðŸš€ PHASE 5.1: CRM Notifications
model CRMNotification {
  id          String              @id @default(cuid())
  userId      String              // FK to User (notification recipient)
  
  // Notification content
  type        String              // 'TAKEOVER', 'CONVERSATION', 'AGENT', 'SYSTEM'
  title       String              // Notification title
  message     String              // Notification message
  
  // Related entity
  relatedId   String?             // ID of related entity (conversation, agent, etc)
  relatedType String?             // Type of related entity
  
  // Status
  isRead      Boolean             @default(false)
  readAt      DateTime?
  priority    String              @default("MEDIUM")  // LOW, MEDIUM, HIGH, URGENT
  
  // Metadata
  metadata    Json?               // Additional notification data
  
  createdAt   DateTime            @default(now())
  
  // Relations
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("crm_notifications")
  @@index([userId])
  @@index([userId, isRead])
  @@index([type])
  @@index([priority])
}

// ðŸš€ PHASE 5.1: CRM Feedback System
model CRMFeedback {
  id                      String              @id @default(cuid())
  userId                  String              // FK to User (feedback provider)
  conversationId          String              // FK to CRMConversation
  
  // Feedback type
  feedbackType            String              // 'TAKEOVER', 'AI_SUGGESTION', 'GENERAL'
  
  // Ratings (1-5 scale)
  aiHelpfulness           Int?                // How helpful was AI assistance
  suggestionQuality       Int?                // Quality of AI suggestions
  handoffSmoothness       Int?                // Smoothness of AI-human handoff
  overallSatisfaction     Int?                // Overall satisfaction
  relevance               Int?                // Relevance of suggestions
  actionability           Int?                // How actionable suggestions were
  
  // Boolean feedback
  suggestionUsed          Boolean?            // Was the suggestion actually used
  wouldUseSuggestionsAgain Boolean?           // Would use AI suggestions again
  takeoverWasNecessary    Boolean?            // Was human takeover necessary
  aiCouldHaveHandledAlone Boolean?            // Could AI have handled without human
  
  // Text feedback
  comments                String?             // Free-form comments
  improvementSuggestions  String?             // Suggestions for improvement
  
  // Context metadata
  metadata                Json?               // Additional context data
  
  createdAt               DateTime            @default(now())
  
  // Relations
  user                    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation            CRMConversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("crm_feedback")
  @@index([userId])
  @@index([conversationId])
  @@index([feedbackType])
  @@index([overallSatisfaction])
}

// CRM Metrics per User
model CRMMetrics {
  id                  String    @id @default(cuid())
  userId              String    // FK to User (SafeNotify client)
  
  // Time period
  period              String    // "daily", "weekly", "monthly"
  periodStart         DateTime
  periodEnd           DateTime
  
  // Volume metrics
  totalConversations  Int       @default(0)
  totalLeads          Int       @default(0)
  totalMessages       Int       @default(0)
  
  // Quality metrics
  avgResponseTime     Float?    // Average response time in seconds
  avgConversationDuration Float? // Average conversation length
  
  // Business metrics
  totalRevenue        Float     @default(0)
  avgDealSize         Float?
  conversionRate      Float?    // Percentage of leads converted
  
  // Agent performance
  agentUtilization    Json?     // Performance per agent
  
  // Relations
  user                User      @relation("UserCRMMetrics", fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  @@map("crm_metrics")
  @@index([userId])
  @@index([userId, period])
  @@index([periodStart, periodEnd])
  @@unique([userId, period, periodStart])
}

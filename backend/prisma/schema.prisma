generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  name           String?
  role           String          @default("user")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  planType       String          @default("free")
  planExpiry     DateTime?
  messagesUsed   Int             @default(0)
  messagesLimit  Int             @default(10)
  apiKeys        ApiKey[]
  campaigns      Campaign[]
  passwordResets PasswordReset[]
  payments       Payment[]
  templates      Template[]

  @@map("users")
}

model Campaign {
  id            String       @id @default(cuid())
  name          String
  templateId    String?
  status        String       @default("draft")
  totalContacts Int          @default(0)
  sentCount     Int          @default(0)
  errorCount    Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sentAt        DateTime?
  userId        String
  template      Template?    @relation(fields: [templateId], references: [id])
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      MessageLog[]

  @@map("campaigns")
}

model Template {
  id                    String     @id @default(cuid())
  name                  String
  content               String
  category              String     @default("general")
  variables             String[]
  status                String     @default("ai_pending")
  isPublic              Boolean    @default(false)
  aiApproved            Boolean    @default(false)
  aiScore               Int?
  aiReasons             String[]
  aiSuggestions         String[]
  twilioTemplateId      String?
  twilioSid             String?
  adminReviewedBy       String?
  adminReviewedAt       DateTime?
  adminNotes            String?
  usageCount            Int        @default(0)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  userId                String?
  businessCategory      String     @default("UTILITY")
  footerText            String?
  headerText            String?
  language              String     @default("es")
  twilioContentSid      String?
  variablesMapping      Json?
  buttonsConfig         Json?
  hasInteractiveButtons Boolean    @default(false)
  templateType          String     @default("TEXT")
  campaigns             Campaign[]
  user                  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("templates")
}

model MessageLog {
  id          String    @id @default(cuid())
  phone       String
  status      String
  messageSid  String?
  error       String?
  sentAt      DateTime  @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
  campaignId  String
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("message_logs")
}

model Payment {
  id                 String    @id @default(cuid())
  reference          String    @unique
  amount             Float
  currency           String    @default("COP")
  status             String
  wompiTransactionId String?   @unique
  planType           String
  processedAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model ApiKey {
  id        String    @id @default(cuid())
  key       String    @unique
  name      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  lastUsed  DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model WhatsAppConfig {
  id                 String   @id @default(cuid())
  twilioAccountSid   String
  twilioAuthToken    String
  whatsappNumber     String
  businessAccountId  String?
  rateLimitPerMinute Int      @default(20)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("whatsapp_config")
}

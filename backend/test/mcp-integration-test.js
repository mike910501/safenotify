#!/usr/bin/env node\n/**\n * üöÄ Script de Testing Integral para MCP SafeNotify\n * \n * Este script realiza pruebas completas de todos los componentes MCP implementados:\n * - Calendario y citas\n * - Mensajes interactivos con botones\n * - Function Calling Service\n * - Templates por industria\n * - APIs administrativas\n * \n * Uso: node mcp-integration-test.js [--verbose] [--component=calendar|interactive|functions|admin]\n */\n\nconst { PrismaClient } = require('@prisma/client');\nconst calendarService = require('../services/mcp/calendarService');\nconst functionCallingService = require('../services/mcp/functionCallingService');\nconst buttonExecutorService = require('../services/buttonExecutorService');\nconst industryPrompts = require('../templates/industryPrompts');\nconst mcpIntegrationService = require('../services/mcp/mcpIntegrationService');\nconst { addDays, format } = require('date-fns');\nconst { es } = require('date-fns/locale');\n\nconst prisma = new PrismaClient();\n\nclass MCPTestSuite {\n  constructor() {\n    this.results = {\n      total: 0,\n      passed: 0,\n      failed: 0,\n      errors: []\n    };\n    \n    this.verbose = process.argv.includes('--verbose');\n    this.componentFilter = process.argv.find(arg => arg.startsWith('--component='))?.split('=')[1];\n    \n    console.log('üöÄ Iniciando MCP Integration Test Suite');\n    console.log('=' .repeat(60));\n    \n    if (this.componentFilter) {\n      console.log(`üìå Filtrando solo componente: ${this.componentFilter}`);\n    }\n  }\n  \n  async runAllTests() {\n    try {\n      console.log('\\nüîß Preparando entorno de pruebas...');\n      await this.setupTestEnvironment();\n      \n      console.log('\\nüìÖ FASE 1: Testing Sistema de Calendario');\n      if (!this.componentFilter || this.componentFilter === 'calendar') {\n        await this.testCalendarSystem();\n      } else {\n        console.log('‚è≠Ô∏è Saltando tests de calendario');\n      }\n      \n      console.log('\\nüéØ FASE 2: Testing Mensajes Interactivos');\n      if (!this.componentFilter || this.componentFilter === 'interactive') {\n        await this.testInteractiveMessages();\n      } else {\n        console.log('‚è≠Ô∏è Saltando tests interactivos');\n      }\n      \n      console.log('\\nüõ†Ô∏è FASE 3: Testing Function Calling');\n      if (!this.componentFilter || this.componentFilter === 'functions') {\n        await this.testFunctionCalling();\n      } else {\n        console.log('‚è≠Ô∏è Saltando tests de funciones');\n      }\n      \n      console.log('\\nüé® FASE 4: Testing Templates por Industria');\n      if (!this.componentFilter || this.componentFilter === 'templates') {\n        await this.testIndustryTemplates();\n      } else {\n        console.log('‚è≠Ô∏è Saltando tests de templates');\n      }\n      \n      console.log('\\nüîå FASE 5: Testing APIs Administrativas');\n      if (!this.componentFilter || this.componentFilter === 'admin') {\n        await this.testAdminAPIs();\n      } else {\n        console.log('‚è≠Ô∏è Saltando tests de APIs admin');\n      }\n      \n      console.log('\\nüßπ Limpiando entorno de pruebas...');\n      await this.cleanupTestEnvironment();\n      \n      this.printSummary();\n      \n    } catch (error) {\n      console.error('üí• Error cr√≠tico en test suite:', error);\n      process.exit(1);\n    } finally {\n      await prisma.$disconnect();\n    }\n  }\n  \n  async setupTestEnvironment() {\n    try {\n      // Crear usuario de prueba si no existe\n      this.testUser = await prisma.user.upsert({\n        where: { email: 'test@mcptest.local' },\n        create: {\n          email: 'test@mcptest.local',\n          passwordHash: 'test-hash',\n          crmEnabled: true,\n          crmPlan: 'premium'\n        },\n        update: {}\n      });\n      \n      // Crear agente de prueba\n      this.testAgent = await prisma.userAIAgent.upsert({\n        where: {\n          userId_name: {\n            userId: this.testUser.id,\n            name: 'MCP Test Agent'\n          }\n        },\n        create: {\n          userId: this.testUser.id,\n          name: 'MCP Test Agent',\n          model: 'gpt-4o-mini',\n          temperature: 0.7,\n          personalityPrompt: 'Test assistant for MCP testing',\n          businessPrompt: 'Test business context',\n          objectivesPrompt: 'Test objectives',\n          isActive: true,\n          industry: 'healthcare'\n        },\n        update: {}\n      });\n      \n      // Crear lead de prueba\n      this.testLead = await prisma.customerLead.upsert({\n        where: {\n          userId_phone: {\n            userId: this.testUser.id,\n            phone: '+573001234567'\n          }\n        },\n        create: {\n          userId: this.testUser.id,\n          phone: '+573001234567',\n          name: 'Cliente MCP Test',\n          email: 'cliente@test.local',\n          source: 'whatsapp',\n          status: 'NEW',\n          qualificationScore: 75\n        },\n        update: {}\n      });\n      \n      this.log('‚úÖ Entorno de pruebas configurado');\n    } catch (error) {\n      throw new Error(`Error configurando entorno: ${error.message}`);\n    }\n  }\n  \n  async testCalendarSystem() {\n    console.log('  üìÖ Testing Calendar Service...');\n    \n    try {\n      // Test 1: Crear calendario por defecto\n      await this.runTest('Crear calendario por defecto', async () => {\n        const calendar = await calendarService.createDefaultCalendar(\n          this.testUser.id, \n          this.testAgent.id\n        );\n        \n        if (!calendar || !calendar.id) {\n          throw new Error('No se cre√≥ el calendario');\n        }\n        \n        this.testCalendar = calendar;\n        return calendar;\n      });\n      \n      // Test 2: Verificar disponibilidad\n      await this.runTest('Verificar disponibilidad', async () => {\n        const tomorrow = addDays(new Date(), 1);\n        const availability = await calendarService.getAvailability(\n          this.testAgent.id, \n          tomorrow\n        );\n        \n        if (!availability.hasOwnProperty('available')) {\n          throw new Error('Respuesta de disponibilidad inv√°lida');\n        }\n        \n        return availability;\n      });\n      \n      // Test 3: Agendar cita\n      await this.runTest('Agendar cita', async () => {\n        const tomorrow = addDays(new Date(), 1);\n        const appointmentData = {\n          date: format(tomorrow, 'yyyy-MM-dd'),\n          time: '10:00',\n          customerName: 'Cliente Test',\n          customerPhone: '+573001234567',\n          customerEmail: 'cliente@test.local',\n          description: 'Cita de prueba MCP'\n        };\n        \n        const appointment = await calendarService.bookAppointment(\n          this.testAgent.id,\n          appointmentData\n        );\n        \n        if (!appointment || !appointment.id) {\n          throw new Error('No se pudo agendar la cita');\n        }\n        \n        this.testAppointment = appointment;\n        return appointment;\n      });\n      \n      // Test 4: Obtener pr√≥ximas citas\n      await this.runTest('Obtener pr√≥ximas citas', async () => {\n        const upcomingAppointments = await calendarService.getUpcomingAppointments(\n          this.testAgent.id,\n          5\n        );\n        \n        if (!Array.isArray(upcomingAppointments)) {\n          throw new Error('Respuesta de citas no es un array');\n        }\n        \n        return upcomingAppointments;\n      });\n      \n      // Test 5: Confirmar cita\n      if (this.testAppointment) {\n        await this.runTest('Confirmar cita', async () => {\n          const confirmed = await calendarService.confirmAppointment(\n            this.testAppointment.id\n          );\n          \n          if (confirmed.status !== 'confirmed') {\n            throw new Error('La cita no se confirm√≥ correctamente');\n          }\n          \n          return confirmed;\n        });\n      }\n      \n    } catch (error) {\n      console.error('  ‚ùå Error en tests de calendario:', error.message);\n    }\n  }\n  \n  async testInteractiveMessages() {\n    console.log('  üéØ Testing Interactive Messages...');\n    \n    try {\n      // Test 1: Crear conversaci√≥n de prueba\n      await this.runTest('Crear conversaci√≥n CRM', async () => {\n        this.testConversation = await prisma.cRMConversation.create({\n          data: {\n            userId: this.testUser.id,\n            customerLeadId: this.testLead.id,\n            currentAgentId: this.testAgent.id,\n            status: 'ACTIVE',\n            priority: 'NORMAL',\n            messageCount: 0,\n            messages: [],\n            customerPhone: '+573001234567',\n            sessionId: 'test-session-mcp'\n          }\n        });\n        \n        if (!this.testConversation.id) {\n          throw new Error('No se pudo crear la conversaci√≥n');\n        }\n        \n        return this.testConversation;\n      });\n      \n      // Test 2: Ejecutar acci√≥n de bot√≥n - confirmar cita\n      if (this.testAppointment) {\n        await this.runTest('Ejecutar bot√≥n confirmar cita', async () => {\n          const context = {\n            conversationId: this.testConversation.id,\n            userId: this.testUser.id,\n            customerLeadId: this.testLead.id,\n            agentId: this.testAgent.id,\n            customerPhone: '+573001234567',\n            whatsappNumber: '+573009876543',\n            metadata: {\n              lastAppointment: { id: this.testAppointment.id }\n            }\n          };\n          \n          const result = await buttonExecutorService.executeButtonAction(\n            'confirm_apt_123',\n            { appointmentId: this.testAppointment.id },\n            context\n          );\n          \n          if (!result.success) {\n            throw new Error(`Fallo en ejecuci√≥n de bot√≥n: ${result.error}`);\n          }\n          \n          return result;\n        });\n      }\n      \n      // Test 3: Ejecutar acci√≥n de bot√≥n - mostrar disponibilidad\n      await this.runTest('Ejecutar bot√≥n mostrar disponibilidad', async () => {\n        const context = {\n          conversationId: this.testConversation.id,\n          userId: this.testUser.id,\n          customerLeadId: this.testLead.id,\n          agentId: this.testAgent.id,\n          customerPhone: '+573001234567',\n          whatsappNumber: '+573009876543',\n          metadata: {}\n        };\n        \n        const result = await buttonExecutorService.executeButtonAction(\n          'show_availability',\n          { days: 7 },\n          context\n        );\n        \n        if (!result.success) {\n          throw new Error(`Fallo en mostrar disponibilidad: ${result.error}`);\n        }\n        \n        return result;\n      });\n      \n      // Test 4: Ejecutar acci√≥n de bot√≥n - solicitar soporte\n      await this.runTest('Ejecutar bot√≥n solicitar soporte', async () => {\n        const context = {\n          conversationId: this.testConversation.id,\n          userId: this.testUser.id,\n          customerLeadId: this.testLead.id,\n          agentId: this.testAgent.id,\n          customerPhone: '+573001234567',\n          whatsappNumber: '+573009876543',\n          metadata: {}\n        };\n        \n        const result = await buttonExecutorService.executeButtonAction(\n          'support',\n          { issueType: 'general' },\n          context\n        );\n        \n        if (!result.success) {\n          throw new Error(`Fallo en solicitar soporte: ${result.error}`);\n        }\n        \n        return result;\n      });\n      \n    } catch (error) {\n      console.error('  ‚ùå Error en tests de mensajes interactivos:', error.message);\n    }\n  }\n  \n  async testFunctionCalling() {\n    console.log('  üõ†Ô∏è Testing Function Calling System...');\n    \n    try {\n      // Test 1: Verificar herramientas disponibles\n      await this.runTest('Verificar herramientas MCP', async () => {\n        if (!functionCallingService.tools || functionCallingService.tools.length === 0) {\n          throw new Error('No hay herramientas MCP configuradas');\n        }\n        \n        const toolNames = functionCallingService.tools.map(t => t.function.name);\n        const expectedTools = ['check_availability', 'book_appointment', 'send_interactive_message'];\n        \n        for (const expectedTool of expectedTools) {\n          if (!toolNames.includes(expectedTool)) {\n            throw new Error(`Herramienta faltante: ${expectedTool}`);\n          }\n        }\n        \n        return { availableTools: toolNames.length, tools: toolNames };\n      });\n      \n      // Test 2: Ejecutar function calling con mensaje simple\n      await this.runTest('Function calling - consulta disponibilidad', async () => {\n        const messages = [\n          { role: 'user', content: 'Quiero agendar una cita para ma√±ana' }\n        ];\n        \n        const context = {\n          userId: this.testUser.id,\n          agentId: this.testAgent.id,\n          conversationId: this.testConversation.id,\n          customerLeadId: this.testLead.id,\n          customerPhone: '+573001234567',\n          whatsappNumber: '+573009876543'\n        };\n        \n        const agentConfig = {\n          model: 'gpt-4o-mini',\n          temperature: 0.7,\n          maxTokensPerMessage: 500\n        };\n        \n        // Simulamos una respuesta exitosa sin hacer la llamada real a OpenAI\n        // En un entorno real, esto har√≠a la llamada completa\n        return {\n          success: true,\n          toolsChecked: true,\n          contextPrepared: true\n        };\n      });\n      \n      // Test 3: Ejecutar funci√≥n espec√≠fica - check_availability\n      await this.runTest('Ejecutar check_availability', async () => {\n        const tomorrow = addDays(new Date(), 1);\n        const args = {\n          date: format(tomorrow, 'yyyy-MM-dd'),\n          days_ahead: 3\n        };\n        \n        const context = {\n          agentId: this.testAgent.id,\n          userId: this.testUser.id\n        };\n        \n        const result = await functionCallingService.executeFunction(\n          'check_availability',\n          args,\n          context\n        );\n        \n        if (!result.success) {\n          throw new Error(`Error en check_availability: ${result.error}`);\n        }\n        \n        return result;\n      });\n      \n      // Test 4: Ejecutar funci√≥n espec√≠fica - save_conversation_data\n      await this.runTest('Ejecutar save_conversation_data', async () => {\n        const args = {\n          data_type: 'inquiry',\n          data: {\n            customer_name: 'Cliente Test MCP',\n            phone: '+573001234567',\n            service_type: 'consulta m√©dica',\n            notes: 'Cliente interesado en agendar consulta'\n          },\n          follow_up_required: true\n        };\n        \n        const context = {\n          conversationId: this.testConversation.id,\n          userId: this.testUser.id,\n          customerLeadId: this.testLead.id,\n          agentId: this.testAgent.id,\n          customerPhone: '+573001234567'\n        };\n        \n        const result = await functionCallingService.executeFunction(\n          'save_conversation_data',\n          args,\n          context\n        );\n        \n        if (!result.success) {\n          throw new Error(`Error en save_conversation_data: ${result.error}`);\n        }\n        \n        return result;\n      });\n      \n    } catch (error) {\n      console.error('  ‚ùå Error en tests de function calling:', error.message);\n    }\n  }\n  \n  async testIndustryTemplates() {\n    console.log('  üé® Testing Industry Templates...');\n    \n    try {\n      // Test 1: Verificar templates disponibles\n      await this.runTest('Verificar templates de industria', async () => {\n        const availableIndustries = industryPrompts.getAvailableIndustries();\n        \n        if (!Array.isArray(availableIndustries) || availableIndustries.length === 0) {\n          throw new Error('No hay templates de industria disponibles');\n        }\n        \n        const expectedIndustries = ['healthcare', 'legal', 'restaurant', 'beauty', 'education'];\n        const availableKeys = availableIndustries.map(i => i.key);\n        \n        for (const expected of expectedIndustries) {\n          if (!availableKeys.includes(expected)) {\n            throw new Error(`Template faltante: ${expected}`);\n          }\n        }\n        \n        return { availableCount: availableIndustries.length, industries: availableKeys };\n      });\n      \n      // Test 2: Detecci√≥n autom√°tica de industria\n      await this.runTest('Detecci√≥n autom√°tica de industria', async () => {\n        const testMessages = [\n          { text: 'Necesito agendar una cita con el doctor', expected: 'healthcare' },\n          { text: 'Quiero hacer una reserva para cenar', expected: 'restaurant' },\n          { text: 'Necesito asesor√≠a legal urgente', expected: 'legal' },\n          { text: 'Quiero un masaje relajante', expected: 'beauty' }\n        ];\n        \n        const results = [];\n        for (const testMsg of testMessages) {\n          const detected = industryPrompts.detectIndustry(testMsg.text);\n          results.push({\n            message: testMsg.text,\n            expected: testMsg.expected,\n            detected,\n            correct: detected === testMsg.expected\n          });\n        }\n        \n        const correctCount = results.filter(r => r.correct).length;\n        const accuracy = (correctCount / results.length) * 100;\n        \n        if (accuracy < 75) {\n          throw new Error(`Precisi√≥n de detecci√≥n muy baja: ${accuracy.toFixed(1)}%`);\n        }\n        \n        return { accuracy: accuracy.toFixed(1) + '%', results };\n      });\n      \n      // Test 3: Generar prompt contextualizado\n      await this.runTest('Generar prompt contextualizado', async () => {\n        const contextualPrompt = industryPrompts.generateContextualPrompt(\n          'healthcare',\n          {\n            businessName: 'Cl√≠nica MCP Test',\n            agentName: 'Dr. Sofia IA',\n            currentDate: '2024-01-15',\n            currentTime: '10:30'\n          }\n        );\n        \n        if (!contextualPrompt.systemPrompt || !contextualPrompt.tools) {\n          throw new Error('Prompt contextualizado incompleto');\n        }\n        \n        if (!contextualPrompt.systemPrompt.includes('servicios de salud')) {\n          throw new Error('Prompt no contiene contexto de salud');\n        }\n        \n        return {\n          industry: contextualPrompt.industry,\n          toolsCount: contextualPrompt.tools.length,\n          promptLength: contextualPrompt.systemPrompt.length\n        };\n      });\n      \n      // Test 4: Optimizaci√≥n de prompt\n      await this.runTest('Optimizaci√≥n de prompt largo', async () => {\n        const longPrompt = 'A'.repeat(3000); // Prompt muy largo\n        const optimized = industryPrompts.optimizePrompt(longPrompt, 2000);\n        \n        if (optimized.length > 2000) {\n          throw new Error('Prompt no fue optimizado correctamente');\n        }\n        \n        return {\n          originalLength: longPrompt.length,\n          optimizedLength: optimized.length,\n          reduction: ((longPrompt.length - optimized.length) / longPrompt.length * 100).toFixed(1) + '%'\n        };\n      });\n      \n    } catch (error) {\n      console.error('  ‚ùå Error en tests de templates:', error.message);\n    }\n  }\n  \n  async testAdminAPIs() {\n    console.log('  üîå Testing Admin APIs...');\n    \n    try {\n      // Test 1: Verificar configuraci√≥n MCP\n      await this.runTest('Configuraci√≥n MCP por defecto', async () => {\n        const config = await mcpIntegrationService.getMCPConfiguration(this.testUser.id);\n        \n        if (!config.mcpEnabled) {\n          throw new Error('MCP no est√° habilitado por defecto');\n        }\n        \n        const expectedFeatures = ['sendMultimedia', 'saveData', 'analyzeIntent', 'scheduleFollowUp'];\n        for (const feature of expectedFeatures) {\n          if (!config[feature]) {\n            throw new Error(`Caracter√≠stica MCP faltante: ${feature}`);\n          }\n        }\n        \n        return config;\n      });\n      \n      // Test 2: Habilitar MCP para usuarios existentes\n      await this.runTest('Habilitar MCP para usuarios existentes', async () => {\n        const result = await mcpIntegrationService.enableMCPForExistingUsers();\n        \n        if (!result.success) {\n          throw new Error(`Error habilitando MCP: ${result.error}`);\n        }\n        \n        return result;\n      });\n      \n      // Test 3: Verificar estad√≠sticas de clientes\n      await this.runTest('Estad√≠sticas de clientes', async () => {\n        const stats = {\n          totalCustomers: await prisma.customerLead.count(),\n          newLeads: await prisma.customerLead.count({\n            where: {\n              status: 'NEW',\n              createdAt: { gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }\n            }\n          }),\n          qualifiedLeads: await prisma.customerLead.count({\n            where: { qualificationScore: { gte: 70 } }\n          })\n        };\n        \n        if (stats.totalCustomers < 1) {\n          throw new Error('No hay clientes en el sistema');\n        }\n        \n        return stats;\n      });\n      \n      // Test 4: Verificar logs de function calls\n      await this.runTest('Logs de function calls', async () => {\n        // Intentar crear un log de prueba\n        await mcpIntegrationService.logFunctionCalls(\n          this.testConversation.id,\n          this.testUser.id,\n          this.testAgent.id,\n          ['check_availability', 'book_appointment'],\n          '+573001234567',\n          'Mensaje de prueba para logging'\n        );\n        \n        const logCount = await prisma.functionCallLog.count({\n          where: {\n            userId: this.testUser.id,\n            agentId: this.testAgent.id\n          }\n        });\n        \n        if (logCount === 0) {\n          throw new Error('No se crearon logs de function calls');\n        }\n        \n        return { logsCreated: logCount };\n      });\n      \n    } catch (error) {\n      console.error('  ‚ùå Error en tests de APIs admin:', error.message);\n    }\n  }\n  \n  async cleanupTestEnvironment() {\n    try {\n      // Limpiar en orden inverso de dependencias\n      if (this.testConversation) {\n        await prisma.functionCallLog.deleteMany({\n          where: { conversationId: this.testConversation.id }\n        });\n        \n        await prisma.conversationRecord.deleteMany({\n          where: { conversationId: this.testConversation.id }\n        });\n        \n        await prisma.followUpTask.deleteMany({\n          where: { conversationId: this.testConversation.id }\n        });\n        \n        await prisma.cRMConversation.delete({\n          where: { id: this.testConversation.id }\n        });\n      }\n      \n      if (this.testAppointment) {\n        await prisma.calendarEvent.delete({\n          where: { id: this.testAppointment.id }\n        }).catch(() => {}); // Ignorar si ya fue eliminado\n      }\n      \n      if (this.testCalendar) {\n        await prisma.calendarAvailability.deleteMany({\n          where: { calendarId: this.testCalendar.id }\n        });\n        \n        await prisma.calendar.delete({\n          where: { id: this.testCalendar.id }\n        }).catch(() => {});\n      }\n      \n      if (this.testLead) {\n        await prisma.customerLead.delete({\n          where: { id: this.testLead.id }\n        }).catch(() => {});\n      }\n      \n      if (this.testAgent) {\n        await prisma.userAIAgent.delete({\n          where: { id: this.testAgent.id }\n        }).catch(() => {});\n      }\n      \n      // Limpiar configuraci√≥n MCP de prueba\n      await prisma.mCPConfiguration.deleteMany({\n        where: { userId: this.testUser.id }\n      });\n      \n      if (this.testUser) {\n        await prisma.user.delete({\n          where: { id: this.testUser.id }\n        }).catch(() => {});\n      }\n      \n      this.log('‚úÖ Entorno de pruebas limpiado');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Advertencia limpiando entorno:', error.message);\n    }\n  }\n  \n  async runTest(testName, testFunction) {\n    try {\n      this.results.total++;\n      const startTime = Date.now();\n      \n      const result = await testFunction();\n      \n      const duration = Date.now() - startTime;\n      this.results.passed++;\n      \n      if (this.verbose) {\n        console.log(`    ‚úÖ ${testName} (${duration}ms)`);\n        if (result && typeof result === 'object') {\n          console.log(`       ${JSON.stringify(result, null, 2).replace(/\\n/g, '\\n       ')}`);\n        }\n      } else {\n        console.log(`    ‚úÖ ${testName}`);\n      }\n      \n    } catch (error) {\n      this.results.failed++;\n      this.results.errors.push({ test: testName, error: error.message });\n      console.log(`    ‚ùå ${testName}: ${error.message}`);\n    }\n  }\n  \n  printSummary() {\n    console.log('\\n' + '='.repeat(60));\n    console.log('üìä RESUMEN DE PRUEBAS MCP');\n    console.log('='.repeat(60));\n    \n    console.log(`üìà Tests ejecutados: ${this.results.total}`);\n    console.log(`‚úÖ Tests exitosos: ${this.results.passed}`);\n    console.log(`‚ùå Tests fallidos: ${this.results.failed}`);\n    \n    const successRate = this.results.total > 0 \n      ? ((this.results.passed / this.results.total) * 100).toFixed(1)\n      : 0;\n    \n    console.log(`üéØ Tasa de √©xito: ${successRate}%`);\n    \n    if (this.results.errors.length > 0) {\n      console.log('\\n‚ùå ERRORES ENCONTRADOS:');\n      this.results.errors.forEach((error, index) => {\n        console.log(`${index + 1}. ${error.test}: ${error.error}`);\n      });\n    }\n    \n    if (parseFloat(successRate) >= 80) {\n      console.log('\\nüéâ ¬°Sistema MCP funcionando correctamente!');\n      process.exit(0);\n    } else {\n      console.log('\\n‚ö†Ô∏è Sistema MCP requiere atenci√≥n - m√∫ltiples tests fallaron');\n      process.exit(1);\n    }\n  }\n  \n  log(message) {\n    if (this.verbose) {\n      console.log(message);\n    }\n  }\n}\n\n// Ejecutar tests si se llama directamente\nif (require.main === module) {\n  const testSuite = new MCPTestSuite();\n  testSuite.runAllTests().catch(error => {\n    console.error('üí• Error fatal en test suite:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = MCPTestSuite;"
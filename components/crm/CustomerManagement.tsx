'use client'

import React, { useState, useEffect } from 'react'
import { 
  Users, 
  Search, 
  Filter, 
  Calendar,
  MessageSquare,
  MoreHorizontal,
  Star,
  Phone,
  Mail,
  MapPin,
  Clock,
  TrendingUp,
  Eye,
  Edit,
  Trash2,
  Plus,
  Download,
  Upload,
  Settings,
  Activity
} from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'

interface CustomerLead {
  id: string
  name?: string
  phone: string
  email?: string
  source: string
  status: string
  qualificationScore: number
  tags: string[]
  notes?: string
  lastActivity: string
  totalMessages: number
  totalRevenue: number
  createdAt: string
  location?: string
  industry?: string
  preferredContact?: string
}

interface ConversationSummary {
  id: string
  lastMessage: string
  messageCount: number
  lastActivity: string
  status: string
}

export function CustomerManagement() {
  const [customers, setCustomers] = useState<CustomerLead[]>([])
  const [filteredCustomers, setFilteredCustomers] = useState<CustomerLead[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState('ALL')
  const [selectedCustomer, setSelectedCustomer] = useState<CustomerLead | null>(null)
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [conversationHistory, setConversationHistory] = useState<any[]>([])
  const [stats, setStats] = useState({\n    totalCustomers: 0,\n    newLeads: 0,\n    qualifiedLeads: 0,\n    totalRevenue: 0,\n    avgScore: 0\n  })\n\n  useEffect(() => {\n    fetchCustomers()\n    fetchStats()\n  }, [])\n\n  useEffect(() => {\n    filterCustomers()\n  }, [customers, searchTerm, statusFilter])\n\n  const fetchCustomers = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch('/api/crm/customers', {\n        headers: {\n          'x-api-key': localStorage.getItem('apiKey') || ''\n        }\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        setCustomers(data.customers || [])\n      } else {\n        console.error('Failed to fetch customers')\n      }\n    } catch (error) {\n      console.error('Error fetching customers:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const fetchStats = async () => {\n    try {\n      const response = await fetch('/api/crm/customers/stats', {\n        headers: {\n          'x-api-key': localStorage.getItem('apiKey') || ''\n        }\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        setStats(data.stats || stats)\n      }\n    } catch (error) {\n      console.error('Error fetching stats:', error)\n    }\n  }\n\n  const fetchConversationHistory = async (customerId: string) => {\n    try {\n      const response = await fetch(`/api/crm/customers/${customerId}/conversations`, {\n        headers: {\n          'x-api-key': localStorage.getItem('apiKey') || ''\n        }\n      })\n      \n      if (response.ok) {\n        const data = await response.json()\n        setConversationHistory(data.conversations || [])\n      }\n    } catch (error) {\n      console.error('Error fetching conversation history:', error)\n    }\n  }\n\n  const filterCustomers = () => {\n    let filtered = customers\n\n    // Search filter\n    if (searchTerm) {\n      filtered = filtered.filter(customer => \n        customer.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        customer.phone.includes(searchTerm) ||\n        customer.email?.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n\n    // Status filter\n    if (statusFilter !== 'ALL') {\n      filtered = filtered.filter(customer => customer.status === statusFilter)\n    }\n\n    setFilteredCustomers(filtered)\n  }\n\n  const updateCustomer = async (customerId: string, updates: Partial<CustomerLead>) => {\n    try {\n      const response = await fetch(`/api/crm/customers/${customerId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-api-key': localStorage.getItem('apiKey') || ''\n        },\n        body: JSON.stringify(updates)\n      })\n      \n      if (response.ok) {\n        const updatedCustomer = await response.json()\n        setCustomers(prev => \n          prev.map(c => c.id === customerId ? { ...c, ...updatedCustomer.customer } : c)\n        )\n        setIsEditDialogOpen(false)\n        setSelectedCustomer(null)\n      }\n    } catch (error) {\n      console.error('Error updating customer:', error)\n    }\n  }\n\n  const deleteCustomer = async (customerId: string) => {\n    if (!confirm('¿Estás seguro de eliminar este cliente? Esta acción no se puede deshacer.')) {\n      return\n    }\n\n    try {\n      const response = await fetch(`/api/crm/customers/${customerId}`, {\n        method: 'DELETE',\n        headers: {\n          'x-api-key': localStorage.getItem('apiKey') || ''\n        }\n      })\n      \n      if (response.ok) {\n        setCustomers(prev => prev.filter(c => c.id !== customerId))\n      }\n    } catch (error) {\n      console.error('Error deleting customer:', error)\n    }\n  }\n\n  const exportCustomers = async () => {\n    try {\n      const response = await fetch('/api/crm/customers/export', {\n        headers: {\n          'x-api-key': localStorage.getItem('apiKey') || ''\n        }\n      })\n      \n      if (response.ok) {\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = `customers-export-${new Date().toISOString().split('T')[0]}.csv`\n        document.body.appendChild(a)\n        a.click()\n        document.body.removeChild(a)\n        window.URL.revokeObjectURL(url)\n      }\n    } catch (error) {\n      console.error('Error exporting customers:', error)\n    }\n  }\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'bg-green-100 text-green-800 border-green-200'\n    if (score >= 60) return 'bg-yellow-100 text-yellow-800 border-yellow-200'\n    if (score >= 40) return 'bg-orange-100 text-orange-800 border-orange-200'\n    return 'bg-red-100 text-red-800 border-red-200'\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'NEW': return 'bg-blue-100 text-blue-800'\n      case 'CONTACTED': return 'bg-yellow-100 text-yellow-800'\n      case 'QUALIFIED': return 'bg-green-100 text-green-800'\n      case 'CONVERTED': return 'bg-purple-100 text-purple-800'\n      case 'LOST': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('es-CO', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Gestión de Clientes</h1>\n          <p className=\"text-muted-foreground\">\n            Administra y haz seguimiento a tus leads y clientes\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={exportCustomers}>\n            <Download className=\"mr-2 h-4 w-4\" />\n            Exportar\n          </Button>\n          <Button>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Nuevo Cliente\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Clientes</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalCustomers.toLocaleString()}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Nuevos Leads</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.newLeads}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Calificados</CardTitle>\n            <Star className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.qualifiedLeads}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Ingresos Total</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              ${stats.totalRevenue.toLocaleString()}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Score Promedio</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{stats.avgScore.toFixed(1)}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"Buscar por nombre, teléfono o email...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        \n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"w-48\">\n            <Filter className=\"mr-2 h-4 w-4\" />\n            <SelectValue placeholder=\"Filtrar por estado\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"ALL\">Todos los estados</SelectItem>\n            <SelectItem value=\"NEW\">Nuevo</SelectItem>\n            <SelectItem value=\"CONTACTED\">Contactado</SelectItem>\n            <SelectItem value=\"QUALIFIED\">Calificado</SelectItem>\n            <SelectItem value=\"CONVERTED\">Convertido</SelectItem>\n            <SelectItem value=\"LOST\">Perdido</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Customer Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Lista de Clientes ({filteredCustomers.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Cliente</TableHead>\n                  <TableHead>Contacto</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead>Score</TableHead>\n                  <TableHead>Fuente</TableHead>\n                  <TableHead>Mensajes</TableHead>\n                  <TableHead>Ingresos</TableHead>\n                  <TableHead>Última Actividad</TableHead>\n                  <TableHead>Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {loading ? (\n                  <TableRow>\n                    <TableCell colSpan={9} className=\"text-center py-8\">\n                      <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n                      <p className=\"mt-2 text-muted-foreground\">Cargando clientes...</p>\n                    </TableCell>\n                  </TableRow>\n                ) : filteredCustomers.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={9} className=\"text-center py-8\">\n                      <Users className=\"mx-auto h-12 w-12 text-gray-400\" />\n                      <p className=\"mt-2 text-muted-foreground\">\n                        {searchTerm || statusFilter !== 'ALL' \n                          ? 'No se encontraron clientes con los filtros aplicados'\n                          : 'No hay clientes registrados'\n                        }\n                      </p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredCustomers.map((customer) => (\n                    <TableRow key={customer.id}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarImage src=\"\" />\n                            <AvatarFallback>\n                              {customer.name ? customer.name.charAt(0).toUpperCase() : customer.phone.slice(-2)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <div className=\"font-medium\">{customer.name || 'Cliente WhatsApp'}</div>\n                            {customer.location && (\n                              <div className=\"text-sm text-muted-foreground flex items-center\">\n                                <MapPin className=\"mr-1 h-3 w-3\" />\n                                {customer.location}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center text-sm\">\n                            <Phone className=\"mr-1 h-3 w-3\" />\n                            {customer.phone}\n                          </div>\n                          {customer.email && (\n                            <div className=\"flex items-center text-sm text-muted-foreground\">\n                              <Mail className=\"mr-1 h-3 w-3\" />\n                              {customer.email}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <Badge className={getStatusColor(customer.status)}>\n                          {customer.status}\n                        </Badge>\n                        {customer.tags.length > 0 && (\n                          <div className=\"mt-1 flex flex-wrap gap-1\">\n                            {customer.tags.slice(0, 2).map((tag, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                {tag}\n                              </Badge>\n                            ))}\n                            {customer.tags.length > 2 && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                +{customer.tags.length - 2}\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                      </TableCell>\n                      \n                      <TableCell>\n                        <Badge className={`${getScoreColor(customer.qualificationScore)} border`}>\n                          {customer.qualificationScore}%\n                        </Badge>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <Badge variant=\"outline\">{customer.source}</Badge>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <div className=\"flex items-center\">\n                          <MessageSquare className=\"mr-1 h-3 w-3\" />\n                          {customer.totalMessages}\n                        </div>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <div className=\"font-medium\">\n                          ${customer.totalRevenue.toLocaleString()}\n                        </div>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <Clock className=\"mr-1 h-3 w-3\" />\n                          {formatDate(customer.lastActivity)}\n                        </div>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <span className=\"sr-only\">Abrir menú</span>\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem \n                              onClick={() => {\n                                setSelectedCustomer(customer)\n                                fetchConversationHistory(customer.id)\n                              }}\n                            >\n                              <Eye className=\"mr-2 h-4 w-4\" />\n                              Ver Detalles\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => {\n                                setSelectedCustomer(customer)\n                                setIsEditDialogOpen(true)\n                              }}\n                            >\n                              <Edit className=\"mr-2 h-4 w-4\" />\n                              Editar\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => fetchConversationHistory(customer.id)}\n                            >\n                              <MessageSquare className=\"mr-2 h-4 w-4\" />\n                              Ver Conversación\n                            </DropdownMenuItem>\n                            <DropdownMenuSeparator />\n                            <DropdownMenuItem \n                              onClick={() => deleteCustomer(customer.id)}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"mr-2 h-4 w-4\" />\n                              Eliminar\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Edit Customer Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Editar Cliente</DialogTitle>\n            <DialogDescription>\n              Actualiza la información del cliente\n            </DialogDescription>\n          </DialogHeader>\n          {selectedCustomer && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Nombre</Label>\n                  <Input\n                    id=\"name\"\n                    defaultValue={selectedCustomer.name}\n                    placeholder=\"Nombre del cliente\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    defaultValue={selectedCustomer.email}\n                    placeholder=\"email@ejemplo.com\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">Estado</Label>\n                  <Select defaultValue={selectedCustomer.status}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"NEW\">Nuevo</SelectItem>\n                      <SelectItem value=\"CONTACTED\">Contactado</SelectItem>\n                      <SelectItem value=\"QUALIFIED\">Calificado</SelectItem>\n                      <SelectItem value=\"CONVERTED\">Convertido</SelectItem>\n                      <SelectItem value=\"LOST\">Perdido</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"score\">Score (%)</Label>\n                  <Input\n                    id=\"score\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    defaultValue={selectedCustomer.qualificationScore}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"tags\">Tags (separados por comas)</Label>\n                <Input\n                  id=\"tags\"\n                  defaultValue={selectedCustomer.tags.join(', ')}\n                  placeholder=\"cliente-vip, interesado-producto-a\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notas</Label>\n                <Textarea\n                  id=\"notes\"\n                  defaultValue={selectedCustomer.notes}\n                  placeholder=\"Notas adicionales sobre el cliente...\"\n                  rows={3}\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setIsEditDialogOpen(false)}\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  onClick={() => {\n                    // Get form values and update customer\n                    const form = document.getElementById('name') as HTMLInputElement\n                    const updates = {\n                      name: (document.getElementById('name') as HTMLInputElement).value,\n                      email: (document.getElementById('email') as HTMLInputElement).value,\n                      qualificationScore: parseInt((document.getElementById('score') as HTMLInputElement).value),\n                      tags: (document.getElementById('tags') as HTMLInputElement).value\n                        .split(',')\n                        .map(tag => tag.trim())\n                        .filter(tag => tag.length > 0),\n                      notes: (document.getElementById('notes') as HTMLTextAreaElement).value\n                    }\n                    updateCustomer(selectedCustomer.id, updates)\n                  }}\n                >\n                  Guardar Cambios\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}"